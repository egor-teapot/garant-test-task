const testData = [
    {value: "a\\b"},
    {value: "a\\b\\c\\d\\e\\f\\g"},
    {value: "a\\b\\c1\\d1"},
    {value: "a1\\b\\c\\d\\e"},
    {value: "a\\b"},
]

const testData2 =[
{
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании\\Сведения о физическом лице, осуществляющем права учредителя (участника)\\Сведения о ФИО и (при наличии) ИНН ФЛ\\Фамилия"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале\\Сведения об обременении доли участника\\Сведения о залогодержателе - ФЛ\\Сведения о нотариальном удостоверении договора залога\\ФИО и (при наличии) ИНН нотариуса, удостоверившего договор залога\\ИНН ФЛ"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале\\Сведения об обременении доли участника\\Сведения о залогодержателе - ФЛ\\Сведения об адресе места жительства в Российской Федерации\\Дом (владение и т.п.)"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании\\Сведения об обременении доли участника\\Сведения о залогодержателе - ФЛ\\Сведения о документе, удостоверяющем личность\\ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения об учредителе (участнике) - иностранном юридическом лице\\Сведения об обременении доли участника\\Сведения о решении судебного органа, по которому на долю учредителя (участника) наложено обременение\\Номер решения"
  },
  {
    
    "value": "Сведения об индивидуальном предпринимателе\\Сведения о регистрирующем органе по месту жительства ИП или главы КФХ"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале\\Сведения об обременении доли участника\\Сведения о залогодержателе - ФЛ\\Сведения об адресе места жительства в Российской Федерации\\Код субъекта Российской Федерации"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения об учредителе (участнике) - российском юридическом лице\\Сведения об обременении доли участника\\Вид обременения"
  },
  {
    
    "value": "Сведения о юридическом лице\\Сведения об учредителях (участниках) юридического лица\\Сведения об учредителе (участнике) - российском юридическом лице\\Сведения об обременении доли участника\\Сведения о залогодержателе - ЮЛ\\Сведения о регистрации в стране происхождения\\ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях\\Государственный регистрационный номер записи ЕГРЮЛ"
  },
]

function objectOrderer(data) {
    let out = []
    
    function findNextObject(arrayOfObjects, targetParameter, targetValue) {

      for(let I = 0; I < arrayOfObjects.length; I++) {
        console.log(`SEACHING ${targetValue} COMPARE TO ${arrayOfObjects[I][targetParameter]}`)
        // console.log(`INSPEC OBJ >> ${JSON.stringify(arrayOfObjects[I].value)} <- | -> ${targetValue} \n`)
        if(arrayOfObjects[I][targetParameter] == targetValue) {
          console.log(">> FOUND \n")
          return I
        }
      }
      console.log(">> NOT FOUND")
      return null
    }


    function hierarchySort(iterator = 0, targetObjectAdress, object, array) {
        console.log(`ITERATION >> ${iterator} "${array[iterator]}" \n`)        
        if(iterator >= array.length) return

        // Ошибка где то здесь
        const nextObjectAdress = findNextObject(object, "value", array[iterator])
        
        if(nextObjectAdress == null) {
            console.log("PUSH \n")
            object.push({value: array[iterator], dependent: []})
            const nextObject = object[object.length - 1].dependent

            hierarchySort(iterator += 1, nextObjectAdress, nextObject, array)

        } else {
            console.log("FOLLOW \n")
            const nextObject = object[nextObjectAdress].dependent
            
            hierarchySort(iterator += 1, nextObjectAdress, nextObject, array)

        }
        // Ошибка где то здесь

    } // hierarchySort


    // прохожусь по каждому элементу массива
    for(let I = 0; I < data.length; I++) {
        const arrayOfSubstrings = data[I].value.split("\\")
        
        hierarchySort(0, I, out, arrayOfSubstrings)
        // break // заглушка
    } // loop for I

    return out
} // fun objectOrderer

console.log(`\n OUTPUT >> \n ${JSON.stringify(objectOrderer(testData2))}`)
